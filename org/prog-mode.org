#+title:    prog-mode
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-08-16 Thu>
#+language: en
#+tags:     emacs config

=prog-mode= is a general mode for any programming mode. Settings applied in
=prog-mode= will be reflected in practically any mode with code or configuration
files. It generally doesn't effect text files.

* parens, braces, oh my
  =smartparens= is rather cumbersome with =evil-mode= around. Staying in the
  insert state can be great on occasion, but it makes commands harder to
  compose, and oftentimes =smartparens= will incorrectly attempt to help me
  close a brace when I'm inserting something on the inside that might be
  temporarily incorrect. After all, I'm still typing. Keeping it disabled is
  vital, but it can also provide some additional functionality, such as
  highlighting unmatched pairs. I've tried excluding =smartparens= from the
  =spacemacs= packages, but some other layer or package pulls it in anyways.
  Instead, let's toss it some config to disable it per this [[https://github.com/syl20bnr/spacemacs/issues/6144][ticket]].

  #+begin_src emacs-lisp
    ;; Disabled until I figure out how to gut this from Doom.
    (on-doom
      (eval-after-load 'smartparens
        '(progn
          (sp-pair "(" nil :actions :rem)
          (sp-pair "[" nil :actions :rem)
          (sp-pair "'" nil :actions :rem)
          (sp-pair "`" nil :actions :rem)
          (sp-pair "<" nil :actions :rem)
          (sp-pair "{" nil :actions :rem)
          (sp-pair "\"" nil :actions :rem)
          )
         )
     )
    (on-spacemacs
      (eval-after-load 'smartparens
        '(progn
          (sp-pair "(" nil :actions :rem)
          (sp-pair "[" nil :actions :rem)
          (sp-pair "'" nil :actions :rem)
          (sp-pair "`" nil :actions :rem)
          (sp-pair "<" nil :actions :rem)
          (sp-pair "{" nil :actions :rem)
          (sp-pair "\"" nil :actions :rem)
          )
         )
      )
  #+end_src
* auto fill comments
  I'm not sure how I feel about using =auto-fill-mode= for normal code, but for
  comments this is a must to me. Fortunately =auto-fill-mode= comes with
  =comment-auto-fill-only-comments=.

  #+begin_src emacs-lisp
    (defun config/auto-fill-comments ()
      "Turn on `auto-fill-mode' and disable it for everything but comments."
      (setq-local comment-auto-fill-only-comments t)
      (auto-fill-mode 1)
      )
  #+end_src

* line wrapping
  Disable line wrapping for any =prog-mode= based buffer. =truncate-lines= set
  to =t= will mean the line is simply "clipped" when it goes off the side of the
  buffer, rather than "folded" (the docs' term) or wrapped.

  #+begin_src emacs-lisp
  (defun config/disable-line-wrapping ()
    (setq-local truncate-lines t)
  )
  #+end_src

* newlines

** end of file
   POSIX files are described as always having a final newline. So I should save
   my files as having a final newline. It can also prevent churn on lines added
   to the end of a file. Though this means that editors that haven't been
   respecting this standard will have saved files that we will override. Without
   a better case I think we should add final newlines, and if that is
   problematic in some cases I should investigate some kind of means of saving
   one-off files without their newline.

   #+begin_src emacs-lisp :results none
     (defun config/manage-final-newline ()
       (setq-default mode-require-final-newline t)
     )

   #+end_src

* all together

  #+begin_src emacs-lisp
    (config/manage-final-newline)
    (add-hook 'prog-mode-hook #'config/auto-fill-comments)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    (add-hook 'prog-mode-hook #'config/disable-line-wrapping)
  #+end_src
